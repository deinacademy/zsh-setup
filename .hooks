#!/bin/bash

# Hooks
local quit="y"
local cmd=""
local cmd_alias=""

# Reveal Executed Alias
alias_for() {
  [[ $1 =~ '[[:punct:]]' ]] && return
  local search=${1}
  local found="$( alias $search )"
  if [[ -n $found ]]; then
    found=${found//\\//} # Replace backslash with slash
    found=${found%\'} # Remove end single quote
    found=${found#"$search='"} # Remove alias name
    echo "${found} ${2}" | xargs # Return found value (with parameters)
  else
    echo ""
  fi
}

expand_command_line() {
  first=$(echo "$1" | awk '{print $1;}')
  rest=$(echo ${${1}/"${first}"/})

  if [[ -n "${first//-//}" ]]; then # is not hypen
    cmd_alias="$(alias_for "${first}" "${rest:1}")" # Check if there's an alias for the command
    if [[ -n $cmd_alias ]]; then # If there was
      echo "${T_GREEN}❯ ${T_YELLOW}${cmd_alias}${F_RESET}" # Print it
    fi
  fi
}

danger(){
  echo "${B_RED}${T_WHITE}DANGER:${F_RESET} Are you sure? really?"
  echo "${T_GREEN}[ANY] = Continue ${F_RESET}| ${T_RED}[Ctrl+c] = Cancel ${F_RESET}"
  read -sk key
  quit="n"
}

danger_validation(){
  local cmd_current=$(echo $1 | xargs)

  if [[ "$cmd_current" =~ ^"rm -rf /" ]]; then
    danger
  elif [[ "$cmd_current" =~ ^"git reset --hard HEAD" ]] || [[ "$cmd_current" =~ ^"guc" ]]; then
    danger
  elif [[ "$cmd_current" =~ ^"git clean -f -d -x" ]] || [[ "$cmd_current" =~ ^"gcc" ]]; then
    danger
  fi
}

cancel(){
  echo "${B_YELLOW}${T_BLACK}ALERT:${F_RESET} Did you run ${F_BOLD}'$1'${F_RESET} command before?"
  echo "${T_GREEN}[ANY] = Continue ${F_RESET}| ${T_RED}[Ctrl+c] = Cancel ${F_RESET}"
  read -sk key
  quit="n"
}

before_validation(){
  local cmd_validation=""
  local cmd_previous=$(fc -ln -1 | xargs) # Get previous command from history
  local cmd_previous_alias="$(alias_for ${cmd_previous})" # Check if there's an alias for the command
  if [[ -n $cmd_previous_alias ]]; then # If there was
    cmd_previous="${cmd_previous_alias}"
  fi
  local cmd_current=$(echo $1 | xargs)

  if [[ "$cmd_current" =~ ^"pkg publish" ]] || [[ "${cmd_alias}" =~ ^"pkg publish" ]]; then
    cmd_validation="pkg run build"
  elif [[ "$cmd_current" =~ ^"git checkout" ]] || [[ "${cmd_alias}" =~ ^"git checkout" ]]; then
    cmd_validation="git pull"
  fi

  if [[ ! -z $cmd_validation ]]; then
    if [[ "${cmd_validation}" != "${cmd_previous}" ]]; then
      cancel $cmd_validation # show cancel alert if is not the previous
    fi
  else
    quit="n"
  fi
}

pre_validation() {
  quit="y" && cmd=""
  [[ $# -eq 0 ]] && return # If there's no input, return. Else...
  cmd="$1" # Save global for after validation
  expand_command_line "$@"
  danger_validation "$@"
  before_validation "$@"
}

run(){
  echo "${B_YELLOW}${T_BLACK}ALERT:${F_RESET} Do you want to run ${F_BOLD}'$1'${F_RESET} command after?"
  echo "${T_GREEN}[Y] = Yes ${F_RESET}| ${T_RED}[ANY] = Cancel ${F_RESET}"
  read -sk key
  if [[ "$key" == "y" ]] || [[ "$key" == "Y" ]]; then
    echo "${T_GREEN}❯ ${T_YELLOW}Running...${F_RESET}"
    eval $1
  fi
}

after_validation(){
  if [[ "$cmd" =~ ^"git pull" ]] || [[ "$cmd" =~ ^"gl" ]] && [[ !"$cmd" =~ ^"glog" ]]; then
    run "sci"
  elif [[ "$cmd" =~ ^"git pull origin" ]] || [[ "$cmd" =~ ^"gl origin" ]]; then
    run "sci"
  elif [[ "$cmd" =~ ^"git checkout -b " ]] || [[ "$cmd" =~ ^"gcb " ]]; then
    run "gpsup && git pull && sci"
  elif [[ "$cmd" =~ ^"git checkout" ]] || [[ "$cmd" =~ ^"gco" ]] || [[ "$cmd" =~ ^"gcd" ]]; then
    run "git pull && sci"
  fi
}

pos_validation() {
  [[ -z $cmd ]] && return # If there's no cmd, return. Else...
  if [[ "$quit" == "n" ]]; then
    after_validation
  fi
  quit="y"
}

autoload -U add-zsh-hook                  # Load the zsh hook module
add-zsh-hook preexec pre_validation       # Adds the pre hook
add-zsh-hook precmd pos_validation        # Adds the pos hook
# add-zsh-hook -d preexec pre_validation  # Remove it for this hook
# add-zsh-hook -d precmd pos_validation   # Remove it for this hook